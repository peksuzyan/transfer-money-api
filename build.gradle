import org.apache.tools.ant.filters.ReplaceTokens

ext {
    project(":transfer-money-backend").ext.packageable = true
    project(":transfer-money-loader").ext.packageable = true
    project(":transfer-money-media").ext.packageable = false
    project(":transfer-money-config").ext.packageable = false

    jerseyVersion = '2.27'
    junitVersion = '4.12'
}

subprojects { Project subproject ->
    apply plugin: 'java'

    group = 'com.gmail.eksuzyan.pavel'
    version = getProperty('app.version')

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
    }

    ext {
        rootManifest = manifest {
            attributes 'Build-Project': rootProject.name
            attributes 'Build-Project-Name': subproject.name
            attributes 'Build-Project-Group': subproject.group
            attributes 'Build-Project-Version': subproject.version
            attributes 'Build-By-Name-User': rootProject.getProperty('app.built.by.user')
            attributes 'Build-By-Name-Full': rootProject.getProperty('app.built.by.name')
            attributes 'Build-Gradle-Version': gradle.gradleVersion
            attributes 'Build-Jdk-Version': JavaVersion.current()
            attributes 'Build-Created': new Date().format('yyyy-MM-dd HH:mm')
        }
    }

    if (subproject.packageable) {
        ext {
            deliveryName = subproject.name + '-' + subproject.version
        }

        task copyProperties(type: Copy, dependsOn: 'build') {
            description "Prepares properties file before it's wrapped"
            group "Distribution"

            from "${rootProject.projectDir}/dist/properties"
            into "${subproject.buildDir}/props"
            rename 'server_template.properties', 'server.properties'
        }

        task copyScripts(type: Copy, dependsOn: 'copyProperties') {
            description "Replaces tokens into template scripts before they're copied"
            group "Distribution"

            from "${rootProject.projectDir}/dist/scripts"
            into "${subproject.buildDir}/scripts"
            rename 'run_template.bat', 'run.bat'
            rename 'run_template.sh', 'run.sh'
            filter(ReplaceTokens, tokens: [
                    APP_NAME    : subproject.name,
                    APP_DELIVERY: subproject.deliveryName])
        }

        task copyDependencies(type: Copy, dependsOn: 'copyScripts') {
            description "Collects and copies dependencies before they're wrapped"
            group "Distribution"

            from configurations.compile
            into "${subproject.buildDir}/libs"
        }

        task packageDelivery(type: Zip, dependsOn: 'copyDependencies') {
            description "Wraps all resources into delivery package"
            group "Distribution"

            from "${subproject.buildDir}/props"
            from "${subproject.buildDir}/scripts"
            from("${subproject.buildDir}/libs") {
                into "libs"
            }

            destinationDir = file("${subproject.buildDir}/dist")
            archiveName = "${subproject.deliveryName}.zip"
        }
    }
}